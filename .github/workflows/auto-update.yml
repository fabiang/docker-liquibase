name: Auto Update

on:
  schedule:
    - cron: "0 7 * * *"

jobs:
  auto-update:
    name: "Auto-Update LIQUIBASE Docker Image"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    env:
      JSONPATH_ALPINE: .jobs.docker-image-alpine.strategy.matrix.liquibase

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - uses: octokit/request-action@v2.x
        id: liquibase_latest_release
        with:
          route: GET /repos/liquibase/liquibase/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}

      - name: "Get OUR lastest version for Alpine"
        id: get_latest_version
        uses: mikefarah/yq@master
        with:
          cmd: yq '${{ env.JSONPATH_ALPINE }}.[-1].version' '.github/workflows/docker.yml'

      - name: "Extract version + asset"
        shell: bash
        run: |
          # Data in eine Datei schreiben, damit die Quotes/UmbrÃ¼che nicht kaputt gehen
          echo '${{ steps.liquibase_latest_release.outputs.data }}' > release.json

          tag_name=$(jq -r '.tag_name' release.json)
          echo "LIQUIBASE_LATEST=${tag_name#v}" >> $GITHUB_ENV
          echo "LIQUIBASE_VERSION_MAJOR=$(echo "${tag_name#v}" | cut -d '.' -f1)" >> $GITHUB_ENV
          echo "LIQUIBASE_VERSION_MINOR=$(echo "${tag_name#v}" | cut -d '.' -f1-2)" >> $GITHUB_ENV

          echo "LIQUIBASE_VERSION_ALPINE=${{ steps.get_alpine_latest_version.outputs.result }}" >> $GITHUB_ENV

          # Erstes Asset mit application/gzip finden
          gzip_url=$(jq -r '.assets[] | select(.content_type=="application/gzip") | .browser_download_url' release.json | head -n1)
          echo "LIQUIBASE_ASSET_GZIP=$gzip_url" >> $GITHUB_ENV

      - name: Download TARBALL
        if: ${{ env.LIQUIBASE_LATEST != env.LIQUIBASE_VERSION_ALPINE }}
        run: |
          curl -v -L '${{ env.LIQUIBASE_ASSET_GZIP }}' -o 'LIQUIBASE.tar'
          echo "LIQUIBASE_TARBALL_HASH=$( sha256sum LIQUIBASE.tar | cut -d ' ' -f1 )" >> $GITHUB_ENV

      - run: |
          echo Latest Version: $LIQUIBASE_LATEST
          echo Major version: $LIQUIBASE_VERSION_MAJOR
          echo Minor version: $LIQUIBASE_VERSION_MINOR
          echo Our Alpine Version: $LIQUIBASE_VERSION_ALPINE
          echo Download hash tarball: $LIQUIBASE_TARBALL_HASH
          echo Download hash zipball: $LIQUIBASE_ZIPBALL_HASH

      - name: Handle version < 1
        if: ${{ env.LIQUIBASE_VERSION_MAJOR == '0' }}
        run: |
          echo LIQUIBASE_VERSION_MAJOR="" >> $GITHUB_ENV
          echo LIQUIBASE_VERSION_MINOR="" >> $GITHUB_ENV

      - name: Fix Major versions Alpine
        if: ${{ env.LIQUIBASE_LATEST != env.LIQUIBASE_VERSION_ALPINE }}
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i 'with((${{ env.JSONPATH_ALPINE }}[] | select(.version_major == "${{ env.LIQUIBASE_VERSION_MAJOR }}")); .version_major = "")' .github/workflows/docker.yml

      - name: Fix Minor versions Alpine
        if: ${{ env.LIQUIBASE_LATEST != env.LIQUIBASE_VERSION_ALPINE }}
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i 'with((${{ env.JSONPATH_ALPINE }}[] | select(.version_minor == "${{ env.LIQUIBASE_VERSION_MINOR }}")); .version_minor = "")' .github/workflows/docker.yml

      - name: Fix Latest Alpine
        if: ${{ env.LIQUIBASE_LATEST != env.LIQUIBASE_VERSION_ALPINE }}
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i 'with((${{ env.JSONPATH_ALPINE }}[] | select(.latest == true)); .latest = false)' .github/workflows/docker.yml

      - name: "Add new Version for Alpine"
        if: ${{ env.LIQUIBASE_LATEST != env.LIQUIBASE_VERSION_ALPINE }}
        uses: mikefarah/yq@master
        with:
          cmd: |
            yq -i '
              ${{ env.JSONPATH_ALPINE }} = ${{ env.JSONPATH_ALPINE }} + {
                "version": "${{ env.LIQUIBASE_LATEST }}",
                "version_major": "${{ env.LIQUIBASE_VERSION_MAJOR }}",
                "version_minor": "${{ env.LIQUIBASE_VERSION_MINOR }}",
                "download_hash": "${{ env.LIQUIBASE_TARBALL_HASH }}",
                "download_url": "${{ env.LIQUIBASE_TARBALL }}",
                "latest": true,
                "show_banner": false
              }' .github/workflows/docker.yml

      - name: Create Pull Request
        if: ${{ env.LIQUIBASE_LATEST != env.LIQUIBASE_VERSION_ALPINE }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          git switch -c "update-${{ env.LIQUIBASE_LATEST }}"

          git config --global user.name "github-actions"
          git config --global user.email \
              "41898282+github-actions[bot]@users.noreply.github.com"

          git add .github/workflows/docker.yml
          git commit --message "Version ${{ env.LIQUIBASE_LATEST }}"

          git push --set-upstream origin "update-${{ env.LIQUIBASE_LATEST }}"

          gh pr create --title "Version ${{ env.LIQUIBASE_LATEST }}" --body ''
